generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  roleId        Int
  image         String?
  createdAt     DateTime
  emailVerified Boolean
  updatedAt     DateTime
  about         String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  role          Role      @relation(fields: [roleId], references: [id])

  @@map("user")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @default("User")
  user User[]
}

model Post {
  id            Int         @id @default(autoincrement())
  title         String
  description   String
  content       String
  slug          String      @unique
  featured      Boolean     @default(false)
  published     Boolean     @default(true)
  authorId      String
  tags          String
  thumbnail     String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  categoryId    Int
  subcategoryId Int
  Likes         Int?
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  category      Category    @relation(fields: [categoryId], references: [id])
  author        User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  sites         Json?
  Post          Post[]
  subcategories Subcategory[]
}

model Subcategory {
  id         Int      @id @default(autoincrement())
  name       String
  categoryId Int
  Post       Post[]
  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}
